// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2023 21:53:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pipelinedProc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipelinedProc_vlg_sample_tst(
	GClock,
	GReset,
	InstrSelect,
	valueSelect,
	sampler_tx
);
input  GClock;
input  GReset;
input [2:0] InstrSelect;
input [2:0] valueSelect;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or InstrSelect or valueSelect)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pipelinedProc_vlg_check_tst (
	BranchOut,
	instructionOut,
	MemWriteOut,
	muxOut,
	RegWriteOut,
	ZeroOut,
	sampler_rx
);
input  BranchOut;
input [31:0] instructionOut;
input  MemWriteOut;
input [7:0] muxOut;
input  RegWriteOut;
input  ZeroOut;
input sampler_rx;

reg  BranchOut_expected;
reg [31:0] instructionOut_expected;
reg  MemWriteOut_expected;
reg [7:0] muxOut_expected;
reg  RegWriteOut_expected;
reg  ZeroOut_expected;

reg  BranchOut_prev;
reg [31:0] instructionOut_prev;
reg  MemWriteOut_prev;
reg [7:0] muxOut_prev;
reg  RegWriteOut_prev;
reg  ZeroOut_prev;

reg  BranchOut_expected_prev;
reg [31:0] instructionOut_expected_prev;
reg  MemWriteOut_expected_prev;
reg [7:0] muxOut_expected_prev;
reg  RegWriteOut_expected_prev;
reg  ZeroOut_expected_prev;

reg  last_BranchOut_exp;
reg [31:0] last_instructionOut_exp;
reg  last_MemWriteOut_exp;
reg [7:0] last_muxOut_exp;
reg  last_RegWriteOut_exp;
reg  last_ZeroOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	BranchOut_prev = BranchOut;
	instructionOut_prev = instructionOut;
	MemWriteOut_prev = MemWriteOut;
	muxOut_prev = muxOut;
	RegWriteOut_prev = RegWriteOut;
	ZeroOut_prev = ZeroOut;
end

// update expected /o prevs

always @(trigger)
begin
	BranchOut_expected_prev = BranchOut_expected;
	instructionOut_expected_prev = instructionOut_expected;
	MemWriteOut_expected_prev = MemWriteOut_expected;
	muxOut_expected_prev = muxOut_expected;
	RegWriteOut_expected_prev = RegWriteOut_expected;
	ZeroOut_expected_prev = ZeroOut_expected;
end


// expected instructionOut[ 31 ]
initial
begin
	instructionOut_expected[31] = 1'bX;
end 
// expected instructionOut[ 30 ]
initial
begin
	instructionOut_expected[30] = 1'bX;
end 
// expected instructionOut[ 29 ]
initial
begin
	instructionOut_expected[29] = 1'bX;
end 
// expected instructionOut[ 28 ]
initial
begin
	instructionOut_expected[28] = 1'bX;
end 
// expected instructionOut[ 27 ]
initial
begin
	instructionOut_expected[27] = 1'bX;
end 
// expected instructionOut[ 26 ]
initial
begin
	instructionOut_expected[26] = 1'bX;
end 
// expected instructionOut[ 25 ]
initial
begin
	instructionOut_expected[25] = 1'bX;
end 
// expected instructionOut[ 24 ]
initial
begin
	instructionOut_expected[24] = 1'bX;
end 
// expected instructionOut[ 23 ]
initial
begin
	instructionOut_expected[23] = 1'bX;
end 
// expected instructionOut[ 22 ]
initial
begin
	instructionOut_expected[22] = 1'bX;
end 
// expected instructionOut[ 21 ]
initial
begin
	instructionOut_expected[21] = 1'bX;
end 
// expected instructionOut[ 20 ]
initial
begin
	instructionOut_expected[20] = 1'bX;
end 
// expected instructionOut[ 19 ]
initial
begin
	instructionOut_expected[19] = 1'bX;
end 
// expected instructionOut[ 18 ]
initial
begin
	instructionOut_expected[18] = 1'bX;
end 
// expected instructionOut[ 17 ]
initial
begin
	instructionOut_expected[17] = 1'bX;
end 
// expected instructionOut[ 16 ]
initial
begin
	instructionOut_expected[16] = 1'bX;
end 
// expected instructionOut[ 15 ]
initial
begin
	instructionOut_expected[15] = 1'bX;
end 
// expected instructionOut[ 14 ]
initial
begin
	instructionOut_expected[14] = 1'bX;
end 
// expected instructionOut[ 13 ]
initial
begin
	instructionOut_expected[13] = 1'bX;
end 
// expected instructionOut[ 12 ]
initial
begin
	instructionOut_expected[12] = 1'bX;
end 
// expected instructionOut[ 11 ]
initial
begin
	instructionOut_expected[11] = 1'bX;
end 
// expected instructionOut[ 10 ]
initial
begin
	instructionOut_expected[10] = 1'bX;
end 
// expected instructionOut[ 9 ]
initial
begin
	instructionOut_expected[9] = 1'bX;
end 
// expected instructionOut[ 8 ]
initial
begin
	instructionOut_expected[8] = 1'bX;
end 
// expected instructionOut[ 7 ]
initial
begin
	instructionOut_expected[7] = 1'bX;
end 
// expected instructionOut[ 6 ]
initial
begin
	instructionOut_expected[6] = 1'bX;
end 
// expected instructionOut[ 5 ]
initial
begin
	instructionOut_expected[5] = 1'bX;
end 
// expected instructionOut[ 4 ]
initial
begin
	instructionOut_expected[4] = 1'bX;
end 
// expected instructionOut[ 3 ]
initial
begin
	instructionOut_expected[3] = 1'bX;
end 
// expected instructionOut[ 2 ]
initial
begin
	instructionOut_expected[2] = 1'bX;
end 
// expected instructionOut[ 1 ]
initial
begin
	instructionOut_expected[1] = 1'bX;
end 
// expected instructionOut[ 0 ]
initial
begin
	instructionOut_expected[0] = 1'bX;
end 
// expected muxOut[ 7 ]
initial
begin
	muxOut_expected[7] = 1'bX;
end 
// expected muxOut[ 6 ]
initial
begin
	muxOut_expected[6] = 1'bX;
end 
// expected muxOut[ 5 ]
initial
begin
	muxOut_expected[5] = 1'bX;
end 
// expected muxOut[ 4 ]
initial
begin
	muxOut_expected[4] = 1'bX;
end 
// expected muxOut[ 3 ]
initial
begin
	muxOut_expected[3] = 1'bX;
end 
// expected muxOut[ 2 ]
initial
begin
	muxOut_expected[2] = 1'bX;
end 
// expected muxOut[ 1 ]
initial
begin
	muxOut_expected[1] = 1'bX;
end 
// expected muxOut[ 0 ]
initial
begin
	muxOut_expected[0] = 1'bX;
end 

// expected BranchOut
initial
begin
	BranchOut_expected = 1'bX;
end 

// expected MemWriteOut
initial
begin
	MemWriteOut_expected = 1'bX;
end 

// expected RegWriteOut
initial
begin
	RegWriteOut_expected = 1'bX;
end 

// expected ZeroOut
initial
begin
	ZeroOut_expected = 1'bX;
end 
// generate trigger
always @(BranchOut_expected or BranchOut or instructionOut_expected or instructionOut or MemWriteOut_expected or MemWriteOut or muxOut_expected or muxOut or RegWriteOut_expected or RegWriteOut or ZeroOut_expected or ZeroOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BranchOut = %b | expected instructionOut = %b | expected MemWriteOut = %b | expected muxOut = %b | expected RegWriteOut = %b | expected ZeroOut = %b | ",BranchOut_expected_prev,instructionOut_expected_prev,MemWriteOut_expected_prev,muxOut_expected_prev,RegWriteOut_expected_prev,ZeroOut_expected_prev);
	$display("| real BranchOut = %b | real instructionOut = %b | real MemWriteOut = %b | real muxOut = %b | real RegWriteOut = %b | real ZeroOut = %b | ",BranchOut_prev,instructionOut_prev,MemWriteOut_prev,muxOut_prev,RegWriteOut_prev,ZeroOut_prev);
`endif
	if (
		( BranchOut_expected_prev !== 1'bx ) && ( BranchOut_prev !== BranchOut_expected_prev )
		&& ((BranchOut_expected_prev !== last_BranchOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOut_expected_prev);
		$display ("     Real value = %b", BranchOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchOut_exp = BranchOut_expected_prev;
	end
	if (
		( instructionOut_expected_prev[0] !== 1'bx ) && ( instructionOut_prev[0] !== instructionOut_expected_prev[0] )
		&& ((instructionOut_expected_prev[0] !== last_instructionOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[0] = instructionOut_expected_prev[0];
	end
	if (
		( instructionOut_expected_prev[1] !== 1'bx ) && ( instructionOut_prev[1] !== instructionOut_expected_prev[1] )
		&& ((instructionOut_expected_prev[1] !== last_instructionOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[1] = instructionOut_expected_prev[1];
	end
	if (
		( instructionOut_expected_prev[2] !== 1'bx ) && ( instructionOut_prev[2] !== instructionOut_expected_prev[2] )
		&& ((instructionOut_expected_prev[2] !== last_instructionOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[2] = instructionOut_expected_prev[2];
	end
	if (
		( instructionOut_expected_prev[3] !== 1'bx ) && ( instructionOut_prev[3] !== instructionOut_expected_prev[3] )
		&& ((instructionOut_expected_prev[3] !== last_instructionOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[3] = instructionOut_expected_prev[3];
	end
	if (
		( instructionOut_expected_prev[4] !== 1'bx ) && ( instructionOut_prev[4] !== instructionOut_expected_prev[4] )
		&& ((instructionOut_expected_prev[4] !== last_instructionOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[4] = instructionOut_expected_prev[4];
	end
	if (
		( instructionOut_expected_prev[5] !== 1'bx ) && ( instructionOut_prev[5] !== instructionOut_expected_prev[5] )
		&& ((instructionOut_expected_prev[5] !== last_instructionOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[5] = instructionOut_expected_prev[5];
	end
	if (
		( instructionOut_expected_prev[6] !== 1'bx ) && ( instructionOut_prev[6] !== instructionOut_expected_prev[6] )
		&& ((instructionOut_expected_prev[6] !== last_instructionOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[6] = instructionOut_expected_prev[6];
	end
	if (
		( instructionOut_expected_prev[7] !== 1'bx ) && ( instructionOut_prev[7] !== instructionOut_expected_prev[7] )
		&& ((instructionOut_expected_prev[7] !== last_instructionOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[7] = instructionOut_expected_prev[7];
	end
	if (
		( instructionOut_expected_prev[8] !== 1'bx ) && ( instructionOut_prev[8] !== instructionOut_expected_prev[8] )
		&& ((instructionOut_expected_prev[8] !== last_instructionOut_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[8] = instructionOut_expected_prev[8];
	end
	if (
		( instructionOut_expected_prev[9] !== 1'bx ) && ( instructionOut_prev[9] !== instructionOut_expected_prev[9] )
		&& ((instructionOut_expected_prev[9] !== last_instructionOut_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[9] = instructionOut_expected_prev[9];
	end
	if (
		( instructionOut_expected_prev[10] !== 1'bx ) && ( instructionOut_prev[10] !== instructionOut_expected_prev[10] )
		&& ((instructionOut_expected_prev[10] !== last_instructionOut_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[10] = instructionOut_expected_prev[10];
	end
	if (
		( instructionOut_expected_prev[11] !== 1'bx ) && ( instructionOut_prev[11] !== instructionOut_expected_prev[11] )
		&& ((instructionOut_expected_prev[11] !== last_instructionOut_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[11] = instructionOut_expected_prev[11];
	end
	if (
		( instructionOut_expected_prev[12] !== 1'bx ) && ( instructionOut_prev[12] !== instructionOut_expected_prev[12] )
		&& ((instructionOut_expected_prev[12] !== last_instructionOut_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[12] = instructionOut_expected_prev[12];
	end
	if (
		( instructionOut_expected_prev[13] !== 1'bx ) && ( instructionOut_prev[13] !== instructionOut_expected_prev[13] )
		&& ((instructionOut_expected_prev[13] !== last_instructionOut_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[13] = instructionOut_expected_prev[13];
	end
	if (
		( instructionOut_expected_prev[14] !== 1'bx ) && ( instructionOut_prev[14] !== instructionOut_expected_prev[14] )
		&& ((instructionOut_expected_prev[14] !== last_instructionOut_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[14] = instructionOut_expected_prev[14];
	end
	if (
		( instructionOut_expected_prev[15] !== 1'bx ) && ( instructionOut_prev[15] !== instructionOut_expected_prev[15] )
		&& ((instructionOut_expected_prev[15] !== last_instructionOut_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[15] = instructionOut_expected_prev[15];
	end
	if (
		( instructionOut_expected_prev[16] !== 1'bx ) && ( instructionOut_prev[16] !== instructionOut_expected_prev[16] )
		&& ((instructionOut_expected_prev[16] !== last_instructionOut_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[16] = instructionOut_expected_prev[16];
	end
	if (
		( instructionOut_expected_prev[17] !== 1'bx ) && ( instructionOut_prev[17] !== instructionOut_expected_prev[17] )
		&& ((instructionOut_expected_prev[17] !== last_instructionOut_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[17] = instructionOut_expected_prev[17];
	end
	if (
		( instructionOut_expected_prev[18] !== 1'bx ) && ( instructionOut_prev[18] !== instructionOut_expected_prev[18] )
		&& ((instructionOut_expected_prev[18] !== last_instructionOut_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[18] = instructionOut_expected_prev[18];
	end
	if (
		( instructionOut_expected_prev[19] !== 1'bx ) && ( instructionOut_prev[19] !== instructionOut_expected_prev[19] )
		&& ((instructionOut_expected_prev[19] !== last_instructionOut_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[19] = instructionOut_expected_prev[19];
	end
	if (
		( instructionOut_expected_prev[20] !== 1'bx ) && ( instructionOut_prev[20] !== instructionOut_expected_prev[20] )
		&& ((instructionOut_expected_prev[20] !== last_instructionOut_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[20] = instructionOut_expected_prev[20];
	end
	if (
		( instructionOut_expected_prev[21] !== 1'bx ) && ( instructionOut_prev[21] !== instructionOut_expected_prev[21] )
		&& ((instructionOut_expected_prev[21] !== last_instructionOut_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[21] = instructionOut_expected_prev[21];
	end
	if (
		( instructionOut_expected_prev[22] !== 1'bx ) && ( instructionOut_prev[22] !== instructionOut_expected_prev[22] )
		&& ((instructionOut_expected_prev[22] !== last_instructionOut_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[22] = instructionOut_expected_prev[22];
	end
	if (
		( instructionOut_expected_prev[23] !== 1'bx ) && ( instructionOut_prev[23] !== instructionOut_expected_prev[23] )
		&& ((instructionOut_expected_prev[23] !== last_instructionOut_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[23] = instructionOut_expected_prev[23];
	end
	if (
		( instructionOut_expected_prev[24] !== 1'bx ) && ( instructionOut_prev[24] !== instructionOut_expected_prev[24] )
		&& ((instructionOut_expected_prev[24] !== last_instructionOut_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[24] = instructionOut_expected_prev[24];
	end
	if (
		( instructionOut_expected_prev[25] !== 1'bx ) && ( instructionOut_prev[25] !== instructionOut_expected_prev[25] )
		&& ((instructionOut_expected_prev[25] !== last_instructionOut_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[25] = instructionOut_expected_prev[25];
	end
	if (
		( instructionOut_expected_prev[26] !== 1'bx ) && ( instructionOut_prev[26] !== instructionOut_expected_prev[26] )
		&& ((instructionOut_expected_prev[26] !== last_instructionOut_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[26] = instructionOut_expected_prev[26];
	end
	if (
		( instructionOut_expected_prev[27] !== 1'bx ) && ( instructionOut_prev[27] !== instructionOut_expected_prev[27] )
		&& ((instructionOut_expected_prev[27] !== last_instructionOut_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[27] = instructionOut_expected_prev[27];
	end
	if (
		( instructionOut_expected_prev[28] !== 1'bx ) && ( instructionOut_prev[28] !== instructionOut_expected_prev[28] )
		&& ((instructionOut_expected_prev[28] !== last_instructionOut_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[28] = instructionOut_expected_prev[28];
	end
	if (
		( instructionOut_expected_prev[29] !== 1'bx ) && ( instructionOut_prev[29] !== instructionOut_expected_prev[29] )
		&& ((instructionOut_expected_prev[29] !== last_instructionOut_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[29] = instructionOut_expected_prev[29];
	end
	if (
		( instructionOut_expected_prev[30] !== 1'bx ) && ( instructionOut_prev[30] !== instructionOut_expected_prev[30] )
		&& ((instructionOut_expected_prev[30] !== last_instructionOut_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[30] = instructionOut_expected_prev[30];
	end
	if (
		( instructionOut_expected_prev[31] !== 1'bx ) && ( instructionOut_prev[31] !== instructionOut_expected_prev[31] )
		&& ((instructionOut_expected_prev[31] !== last_instructionOut_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOut_expected_prev);
		$display ("     Real value = %b", instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instructionOut_exp[31] = instructionOut_expected_prev[31];
	end
	if (
		( MemWriteOut_expected_prev !== 1'bx ) && ( MemWriteOut_prev !== MemWriteOut_expected_prev )
		&& ((MemWriteOut_expected_prev !== last_MemWriteOut_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWriteOut_expected_prev);
		$display ("     Real value = %b", MemWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemWriteOut_exp = MemWriteOut_expected_prev;
	end
	if (
		( muxOut_expected_prev[0] !== 1'bx ) && ( muxOut_prev[0] !== muxOut_expected_prev[0] )
		&& ((muxOut_expected_prev[0] !== last_muxOut_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[0] = muxOut_expected_prev[0];
	end
	if (
		( muxOut_expected_prev[1] !== 1'bx ) && ( muxOut_prev[1] !== muxOut_expected_prev[1] )
		&& ((muxOut_expected_prev[1] !== last_muxOut_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[1] = muxOut_expected_prev[1];
	end
	if (
		( muxOut_expected_prev[2] !== 1'bx ) && ( muxOut_prev[2] !== muxOut_expected_prev[2] )
		&& ((muxOut_expected_prev[2] !== last_muxOut_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[2] = muxOut_expected_prev[2];
	end
	if (
		( muxOut_expected_prev[3] !== 1'bx ) && ( muxOut_prev[3] !== muxOut_expected_prev[3] )
		&& ((muxOut_expected_prev[3] !== last_muxOut_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[3] = muxOut_expected_prev[3];
	end
	if (
		( muxOut_expected_prev[4] !== 1'bx ) && ( muxOut_prev[4] !== muxOut_expected_prev[4] )
		&& ((muxOut_expected_prev[4] !== last_muxOut_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[4] = muxOut_expected_prev[4];
	end
	if (
		( muxOut_expected_prev[5] !== 1'bx ) && ( muxOut_prev[5] !== muxOut_expected_prev[5] )
		&& ((muxOut_expected_prev[5] !== last_muxOut_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[5] = muxOut_expected_prev[5];
	end
	if (
		( muxOut_expected_prev[6] !== 1'bx ) && ( muxOut_prev[6] !== muxOut_expected_prev[6] )
		&& ((muxOut_expected_prev[6] !== last_muxOut_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[6] = muxOut_expected_prev[6];
	end
	if (
		( muxOut_expected_prev[7] !== 1'bx ) && ( muxOut_prev[7] !== muxOut_expected_prev[7] )
		&& ((muxOut_expected_prev[7] !== last_muxOut_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxOut_expected_prev);
		$display ("     Real value = %b", muxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_muxOut_exp[7] = muxOut_expected_prev[7];
	end
	if (
		( RegWriteOut_expected_prev !== 1'bx ) && ( RegWriteOut_prev !== RegWriteOut_expected_prev )
		&& ((RegWriteOut_expected_prev !== last_RegWriteOut_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWriteOut_expected_prev);
		$display ("     Real value = %b", RegWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegWriteOut_exp = RegWriteOut_expected_prev;
	end
	if (
		( ZeroOut_expected_prev !== 1'bx ) && ( ZeroOut_prev !== ZeroOut_expected_prev )
		&& ((ZeroOut_expected_prev !== last_ZeroOut_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZeroOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZeroOut_expected_prev);
		$display ("     Real value = %b", ZeroOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ZeroOut_exp = ZeroOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pipelinedProc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg [2:0] InstrSelect;
reg [2:0] valueSelect;
// wires                                               
wire BranchOut;
wire [31:0] instructionOut;
wire MemWriteOut;
wire [7:0] muxOut;
wire RegWriteOut;
wire ZeroOut;

wire sampler;                             

// assign statements (if any)                          
pipelinedProc i1 (
// port map - connection between master ports and signals/registers   
	.BranchOut(BranchOut),
	.GClock(GClock),
	.GReset(GReset),
	.InstrSelect(InstrSelect),
	.instructionOut(instructionOut),
	.MemWriteOut(MemWriteOut),
	.muxOut(muxOut),
	.RegWriteOut(RegWriteOut),
	.valueSelect(valueSelect),
	.ZeroOut(ZeroOut)
);

// GClock
always
begin
	GClock = 1'b0;
	GClock = #5000 1'b1;
	#5000;
end 

// GReset
initial
begin
	GReset = 1'b1;
	GReset = #10000 1'b0;
	GReset = #20000 1'b1;
end 
// InstrSelect[ 2 ]
initial
begin
	InstrSelect[2] = 1'b0;
end 
// InstrSelect[ 1 ]
initial
begin
	InstrSelect[1] = 1'b0;
end 
// InstrSelect[ 0 ]
initial
begin
	InstrSelect[0] = 1'b0;
end 
// valueSelect[ 2 ]
initial
begin
	valueSelect[2] = 1'b0;
end 
// valueSelect[ 1 ]
initial
begin
	valueSelect[1] = 1'b0;
end 
// valueSelect[ 0 ]
initial
begin
	valueSelect[0] = 1'b0;
end 

pipelinedProc_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.InstrSelect(InstrSelect),
	.valueSelect(valueSelect),
	.sampler_tx(sampler)
);

pipelinedProc_vlg_check_tst tb_out(
	.BranchOut(BranchOut),
	.instructionOut(instructionOut),
	.MemWriteOut(MemWriteOut),
	.muxOut(muxOut),
	.RegWriteOut(RegWriteOut),
	.ZeroOut(ZeroOut),
	.sampler_rx(sampler)
);
endmodule

